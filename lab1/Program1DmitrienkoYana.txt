/* Part of Cosmos by OpenGenus Foundation */
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <locale.h>

#define INF 9999999


struct Graph
{
    int** matrix;
    int n;
    int s;
    int t;
};

int min(int a, int b)
{
    if (a < b)
        return a;
    else
        return b;
}

struct Graph* InitTable(int n)
{
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->n = n;
    graph->matrix = (int**)malloc(sizeof(int*) * n); // создать матрицу смежности на count + 5 элементов (+5 - что б был запас)
    for (int i = 0; i < n; i++) {
        graph->matrix[i] = (int*)malloc(sizeof(int) * n);
        for (int k = 0; k < n; k++)
            graph->matrix[i][k] = INF;
    }

    return graph;
}

struct Graph* Input()
{
    int val = 1;
    int n = 0;
    printf("Введите размер поля n: ");
    scanf("%d", &n);

    struct Graph* graph = InitTable(n * n);

    printf("Поле ввода: \n");
    int v = 1;
    for (int r = 0; r < n; r++)
    {
        for (int k = 1; k <= n; k++)
        {
            printf("%d", n * n - (r + 1) * n + k);
            if (k < n)
                printf(" -> ");
        }
        printf("\n");
        if (r < n - 1)
        {
            for (int k = 0; k < n; k++)
                printf("^    ");
            printf("\n");
            for (int k = 0; k < n; k++)
                printf("|    ");
            printf("\n");
        }
    }

    printf("Введите все связи: \n");
    printf("Связи на восток: \n");
    for (int i = 0; i < n * n; i++)
    {
        if ((i + 1) % n == 0)
            continue;
        printf("%d->%d: ", i + 1, i + 2);
        int w = rand() % 10;
        printf("%d\n", w);
        graph->matrix[i][i + 1] = w;
    }

    printf("Связи на север: \n");
    for (int i = 0; i + n < n * n; i++)
    {
        printf("%d->%d: ", i + 1, i + 1 + n);
        int w = rand() % 10;
        printf("%d\n", w);
        graph->matrix[i][i + n] = w;
    }

    return graph;
}

//matrix - матрица смежности
int originalFloydWarshall(struct Graph* graph) 
{
    //Пробегаемся по всем вершинам и ищем более короткий путь
    //через вершину k
    for (int k = 0; k < graph->n; k++)
    {
        for (int i = 0; i < graph->n; i++)
        {
            for (int j = 0; j < graph->n; j++)
            {
                //Новое значение ребра равно минимальному между старым
                //и суммой ребер i <-> k + k <-> j (если через k пройти быстрее)
                graph->matrix[i][j] = min(graph->matrix[i][j], graph->matrix[i][k] + graph->matrix[k][j]);
            }
        }
    }
    return graph->matrix[0][graph->n - 1];
}

int main(int argc, char** argv) 
{
    setlocale(LC_ALL, "Russian");

    struct Graph* graph = Input();
    int path = originalFloydWarshall(graph);

    printf("\nПуть: %d", path);
    return 0;
}
